Knapsack(배낭 문제)

배낭과 N개의 물건이 존재
각 물건은 1개씩 존재하며 배낭에 담을 수 있는 최대 용량 존재하며

위와 같은 조건일 때 배낭의 최대 용량을 초과하지 않으며
배낭에 담을 수 있는 최대 가치의 합을 찾는 문제

물건을 쪼갤 수 있는 Fraction Knapsack Problem
물건을 쪼갤 수 없는 0-1 knapsack Problem

대표적인 DP 문제
DP: 큰 문제를 작은 문제로 나누어서 푸는 방법

최대 M까지 담을 수 있는 배낭이 있고 물건이 있을 때
-상태
가방에 공간이 (M-N)kg or 그대로 Mkg
단순한 과정을 모든 물건에 대해 반복
가방에 더 이상 공간이 없을 때까지

!
배낭의 용량 M, 무게 N, 가치 K
현재 가치 K 배낭 용량(M-N) kg
-> 무게 N인 물건 제외, 최대(M-N)kg 담을 수 있는 배낭
따라서 무가게 (M-N)kg인 배낭과 남은 물건들로 구성된 새로운 문제
한번 더 작은 문제로 바꿀 수 있음
ex) 최대 6kg를 담을 수 있는 배낭의 최대 가치
= 4$ + (최대 3kg를 담을 수 있는 배낭의 최대 가치)
= 2$ + (최대 2kg를 담을 수 있는 배낭의 최대 가치)
부분의 답이 큰 부분의 답이 되고 이 부분들의 답이 전체의 답이 된다
---> DP의 특징

!!
위와 똑같은 로직을 반복하면 변하는 것은 딱 2가지
1. 배낭의 최대무게 2. 담을 수 있는 봉투의 개수와 종류
2차원 배열을 사용하여 각 경우의 수에 따른 답을 따로 저장해야함

최대이익[i][w]
= 최대무게가 w인 가방에서 i번째 물건까지 판단했을 때의 최대 가치
->최대이익[4][6]의 의미
최대 무게 6kg 배낭, 4번째 물건까지 진행했을 때의 최대 가치

이때 2가지 경우의 수가 존재{최대이익[K][W]까지 진행 가정}
1. 물건의 무게가 최대 배낭 무게(W)를 추과할 때
물건을 배낭에 넣을 수 없다
최대 가치는 이전의 최대 가치인 K번째로 유지
배낭 무게 W에는 아무런 변화 없음
dp[K+1][W] = dp[K][W] (dp = 기존에 있던 최대 가치)

2. 물건의 무게가 최대 배낭 무게(W)를 초과하지 않을 때
--> 2가지 경우의 수로 분리
2-1. 넣지 않는다
물건의 무게가 배낭 무게를 초과할 때와 같다
dp[K+1][W] = dp[K][W]
2-2. 넣는다
배낭에 물건을 넣을 수 있다는 말은
배낭 안에 해당 물건을 넣을 충분한 무게 존재
But 넣는다고 했을 때 충분한 무게가 없다면
안에 있는 물건을 빼고 해당 물건을 넣어야함
최대 6kg인 배낭에서 3kg인 물건(첫 번째 물건)을 담으면
dp[1][6] = 4+dp[0][3]
dp[K+1][W] = K+1 가치 + dp[K][W-M]

!!!최종 정리
1. 물건 K의 무게 > 배낭 W 무게
dp[K][W] = dp[K-1][W]
2. 물건 K의 무게 <= 배낭 W 무게
dp[K][W] = max(dp[K-1][W], K가치+dp[K-1][W-K무게])
위 식을 점화식이라고 한다